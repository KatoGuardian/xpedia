{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Item.svelte",
    "..\\..\\Facility.svelte",
    "..\\..\\BaseServices.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { tick, afterUpdate } from \"svelte\";\r\n  import { rul } from \"./Ruleset\";\r\n  import { Link, Intro, LinksPage, Value, LinksList } from \"./Components\";\r\n  import Article from \"./Article.svelte\";\r\n\r\n  export let source;\r\n\r\n  let article = null;\r\n  let found = null;\r\n  let query = \"\";\r\n  let currentSection = null;\r\n  let activeOption;\r\n  let ignoreNextAutoscroll = false;\r\n  let id = \"\";\r\n  let searchDelayHandle = null;\r\n  let seeSide = true;\r\n  let hugeFont = false;\r\n  let allowHugeFont = false;\r\n  let showDropdown = false;\r\n  let showLanguagesDropdown = false;\r\n  let tooltip;\r\n  let locale = document.location.pathname;\r\n\r\n  let isTouch = \"ontouchstart\" in window;\r\n\r\n\r\n  async function loadRules() {\r\n    await rul.load(source);\r\n  }\r\n\r\n  let rulesLoaded = loadRules();\r\n\r\n  function goTo(id) {\r\n    window.location.hash = \"##\" + id;\r\n  }\r\n\r\n  function checkHash() {    \r\n    showDropdown = showLanguagesDropdown = false;\r\n    let hash = decodeURI(document.location.hash);\r\n    if(hash.substr(0,2) != \"##\")\r\n      return;\r\n    id = hash.substr(2);\r\n\r\n    if (id == \"MAIN\") {\r\n      query = \"\";\r\n    }\r\n    if (id) {\r\n      let dd = id.indexOf(\"::\");\r\n      if (dd != -1) {\r\n        query = id.substr(dd + 2);\r\n        id = id.substr(0, dd);\r\n      }\r\n\r\n      if (id == \"SEARCH\") {\r\n        if (query.length >= 4)\r\n          found = rul.search.findArticles(query).map(a => a.id);\r\n        else found = 0;\r\n        article = null;\r\n      } else {\r\n        found = null;\r\n        if (!article || article.id != id) article = rul.article(id);\r\n      }\r\n\r\n      console.log(id);\r\n      console.log(article);\r\n    }\r\n\r\n    if (article) {\r\n      if (article.section && currentSection != article.section)\r\n        currentSection = article.section;\r\n    } else {\r\n      currentSection = null;\r\n    }\r\n\r\n    if (activeOption) {\r\n      tick().then(() =>\r\n        activeOption.scrollIntoView({ behavior: \"auto\", block: \"center\" })\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  function nextArticle(delta) {\r\n    let nextArticle = rul.findNextArticle(article, delta);\r\n    if (nextArticle) {\r\n      goTo(nextArticle.id);\r\n    }\r\n  }\r\n\r\n  function searchKeyUp(e) {\r\n    if (searchDelayHandle) clearTimeout(searchDelayHandle);\r\n\r\n    searchDelayHandle = setTimeout(\r\n      () => {\r\n        goTo(\"SEARCH::\" + e.target.value);\r\n        searchDelayHandle = null;\r\n      },\r\n      e.key == \"Enter\" ? 10 : 1000\r\n    );\r\n  }\r\n\r\n  function selectSection(id) {\r\n    currentSection = rul.sections[id];\r\n  }\r\n\r\n  window.onhashchange = checkHash;\r\n\r\n  rulesLoaded.then(checkHash);\r\n\r\n  $: {\r\n    console.info(article || \"no article\");\r\n    //document.documentElement.style.fontSize = hugeFont ? \"24pt\" : \"12pt\";\r\n  }\r\n\r\n  let sortArticles = false;\r\n\r\n  function dropdown(val = null) {\r\n    if (val === null) {\r\n      showDropdown = !showDropdown;\r\n    } else {\r\n      if (!isTouch) showDropdown = val;\r\n    }\r\n  }\r\n\r\n  $: sortedArticles = articles =>\r\n    sortArticles\r\n      ? articles.slice().sort((a, b) => (a.title > b.title ? 1 : -1))\r\n      : articles;\r\n\r\n  document.addEventListener(\"keydown\", event => {\r\n    const keyName = event.key;\r\n    if (keyName == \"ArrowRight\") nextArticle(1);\r\n    if (keyName == \"ArrowLeft\") nextArticle(-1);\r\n  });\r\n\r\n\r\n  window.addEventListener(\"mousemove\", async e => {\r\n    if (tooltip) {\r\n      let el = e.target;\r\n      while (el && el.attributes && !el.attributes.tooltip) \r\n        el = el.parentNode;\r\n      \r\n      if (el && el.attributes) {\r\n        let idattr = el.attributes.tooltip;\r\n        let rect = e.target.getBoundingClientRect();\r\n        tooltip.style.left = rect.left + rect.width/2 + \"px\";\r\n        tooltip.style.top = rect.top + \"px\";\r\n        let id = idattr.value;\r\n        toggleTooltip(id in rul.lang && !e.shiftKey ? rul.lang[id]:id.substr(4));\r\n      } else {\r\n        toggleTooltip(null)\r\n      }\r\n    }\r\n  });\r\n\r\n  function toggleTooltip(text) {\r\n    tooltip.innerHTML = text;\r\n    let classes = tooltip.classList;\r\n    if (text) {\r\n      classes.add(\"visible\");\r\n    } else {\r\n      classes.remove(\"visible\");\r\n    }\r\n  }\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n  .centered {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin-top: -50px;\r\n    margin-left: -50px;\r\n    text-align: center;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  {#if !article}\r\n    <title>BootyPedia</title>\r\n  {/if}\r\n</svelte:head>\r\n\r\n{#await rulesLoaded}\r\n  <div class=\"centered\">\r\n    {rul.str('Loading...')}\r\n    <hr />\r\n    <img alt={rul.str('Loading...')} src=\"xpedia/spinner.svg\" />\r\n  </div>\r\n{:then}\r\n  <nav class=\"navbar flex-horisontal\" style=\"flex-wrap:nowrap\">\r\n\r\n    <div\r\n      class=\"navbar-dropdown-container\"\r\n      on:mouseover={e => dropdown(true)}\r\n      on:mouseout={e => dropdown(false)}>\r\n      <div class=\"navbar-button\" on:mousedown={e => dropdown()}>\r\n        <img src=\"xpedia/favicon.png\" alt=\"logo X\" class=\"xpedia-icon\" />\r\n        <nobr>\r\n          <span class=\"on-wide\">{rul.modName}&nbsp;&nbsp;{rul.str('BootyPedia')}&nbsp;&nbsp;&nbsp;</span>\r\n          <span style=\"transform:scale(1.5,0.75); font-weight: bold; display:inline-block;\">\r\n            V\r\n          </span>\r\n          &nbsp;\r\n        </nobr>\r\n      </div>\r\n\r\n      <div\r\n        class=\"navbar-dropdown\"\r\n        style={showDropdown ? 'visibility:visible' : 'visibility:hidden'}>\r\n        <div class=\"flex-horisontal\" style=\"flex-wrap:nowrap\">\r\n          <div class=\"navbar-auto navbar-list\">\r\n            <div />\r\n            {#each rul.sectionsOrder as section, i}\r\n              <a href={'##' + section.id}>{section.title}</a>\r\n            {/each}\r\n          </div>\r\n          <div class=\"navbar-custom navbar-list\">\r\n            {#each rul.typeSectionsOrder as section, i}\r\n              <a href={'##' + section.id}>{section.title}</a>\r\n            {/each}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <a\r\n      class=\"navbar-button navbar-current-article on-wide\"\r\n      href={'##' + (currentSection ? currentSection.id : 'MAIN')}>\r\n      {currentSection ? currentSection.title : ''}\r\n    </a>\r\n\r\n    <div class=\"stretcher\" />\r\n      <div class=\"navbar-button\">\r\n        <a href=\"##MAIN\">\r\n        <img src=\"xpedia/2.png\" alt=\"Home\" class=\"xpedia-icon main-menu\" style=\"padding-top: 0.3rem\"/>\r\n        </a>\r\n      </div>\r\n      <div class=\"navbar-button\">\r\n        <a href=\"https://openxcom.org/forum/index.php/topic,3626.0.html\" target=\"_blank\">\r\n        <img src=\"xpedia/3.png\" alt=\"DL_link\" class=\"xpedia-icon main-menu\" style=\"padding-top: 0.3rem\"/>\r\n        </a>\r\n      </div>\r\n    {#if rul.config && rul.config.languages && rul.config.languages.length > 1}\r\n      <div\r\n        class=\"navbar-dropdown-container\"\r\n        on:mouseover={e => !isTouch && (showLanguagesDropdown = true)}\r\n        on:mouseout={e => !isTouch && (showLanguagesDropdown = false)}>\r\n        <div\r\n          class=\"navbar-button\"\r\n          on:mousedown={e => (showLanguagesDropdown = !showLanguagesDropdown)}>\r\n          {#if \"/en-US.html\".includes(locale) || \"/en-US\".includes(locale)}\r\n          <img src=\"xpedia/images/us.png\" alt=\"en\" class=\"xpedia-icon main-menu\"/>\r\n          {:else if \"/ru.html\".includes(locale) || \"/ru\".includes(locale)}\r\n          <img src=\"xpedia/images/ru.png\" alt=\"ru\" class=\"xpedia-icon main-menu\"/>\r\n          {:else if \"/pl.html\".includes(locale) || \"/pl\".includes(locale)}\r\n          <img src=\"xpedia/images/pl.png\" alt=\"pl\" class=\"xpedia-icon main-menu\"/>\r\n          {:else if \"/cs.html\".includes(locale) || \"/cs\".includes(locale)}\r\n          <img src=\"xpedia/images/cz.png\" alt=\"cs\" class=\"xpedia-icon main-menu\"/>\r\n          {:else if \"/es-ES.html\".includes(locale)}\r\n          <img src=\"xpedia/images/es.png\" alt=\"es\" class=\"xpedia-icon main-menu\"/>\r\n          {:else}\r\n          <img src=\"xpedia/1.png\" alt=\"Aあ\" class=\"xpedia-icon main-menu\"/>\r\n          {/if}\r\n        </div>\r\n        <div\r\n          class=\"languages-dropdown\"\r\n          style={showLanguagesDropdown ? 'visibility:visible' : 'visibility:hidden'}>\r\n          {#each rul.config.languages as lang}\r\n<!--            <a href=\"{lang.save_as}##{id}\">{lang.name}</a>  -->\r\n            {#if \"English\".includes(lang.name)}\r\n              <div class=\"languages-image\">\r\n              <a href=\"{lang.save_as}##{id}\">\r\n              <img src=\"xpedia/images/us.png\" alt=\"English\">\r\n              </a>\r\n              </div>\r\n            {/if}\r\n            {#if \"Русский\".includes(lang.name)}\r\n              <div class=\"languages-image\">\r\n              <a href=\"{lang.save_as}##{id}\">\r\n              <img src=\"xpedia/images/ru.png\" alt=\"Русский\">\r\n              </a>\r\n              </div>\r\n            {/if}\r\n            {#if \"Polski\".includes(lang.name)}\r\n              <div class=\"languages-image\">\r\n              <a href=\"{lang.save_as}##{id}\">\r\n              <img src=\"xpedia/images/pl.png\" alt=\"Polski\">\r\n              </a>\r\n              </div>\r\n            {/if}\r\n            {#if \"Čeština\".includes(lang.name)}\r\n              <div class=\"languages-image\">\r\n              <a href=\"{lang.save_as}##{id}\">\r\n              <img src=\"xpedia/images/cz.png\" alt=\"Čeština\">\r\n              </a>\r\n              </div>\r\n            {/if}\r\n            {#if \"Español\".includes(lang.name)}\r\n              <div class=\"languages-image\">\r\n              <a href=\"{lang.save_as}##{id}\">\r\n              <img src=\"xpedia/images/es.png\" alt=\"Español\">\r\n              </a>\r\n              </div>\r\n            {/if}\r\n          {/each}\r\n        </div>\r\n      </div>\r\n    {/if}\r\n\r\n    {#if allowHugeFont}\r\n      <button class=\"navbar-button\" on:click={e => (hugeFont = !hugeFont)}>\r\n        <span style=\"font-size:150%\">A</span>\r\n        <span style=\"font-size:75%\">A</span>\r\n      </button>\r\n    {/if}\r\n\r\n    <div class=\"navbar-search\">\r\n      <input\r\n        class=\"input\"\r\n        type=\"text\"\r\n        bind:value={query}\r\n        on:keyup={searchKeyUp}\r\n        placeholder={rul.str('Search...')} />\r\n    </div>\r\n\r\n  </nav>\r\n\r\n  {#if seeSide}\r\n    <nav class=\"sidebar\">\r\n\r\n      <button\r\n        class=\"side-sort-button\"\r\n        style={sortArticles ? '' : 'text-decoration:line-through'}\r\n        on:click={e => (sortArticles = !sortArticles)}>\r\n        {rul.str('A-Z')}\r\n      </button>\r\n\r\n      {#each article && article.section && article.section.isType() ? rul.typeSectionsOrder : rul.sectionsOrder as section}\r\n        {#if !currentSection || section.id == currentSection.id}\r\n          <p class=\"menu-label\">{section.title}</p>\r\n          <div class=\"menu-list\">\r\n            {#each sortedArticles(section.articles) as option}\r\n              {#if article && article.id == option.id}\r\n                <a\r\n                  href={'##' + option.id}\r\n                  bind:this={activeOption}\r\n                  class=\"active-article-option side-link\">\r\n                  {option.title}\r\n                </a>\r\n              {:else}\r\n                <a\r\n                  class=\"side-link\"\r\n                  href={'##' + option.id}\r\n                  on:click={() => (ignoreNextAutoscroll = true)}>\r\n                  {option.title}\r\n                </a>\r\n              {/if}\r\n            {/each}\r\n          </div>\r\n        {/if}\r\n      {/each}\r\n      <br />\r\n    </nav>\r\n  {/if}\r\n\r\n  <button\r\n    class=\"side-hide-button\"\r\n    on:click={e => {\r\n      if (e.button == 0) seeSide = !seeSide;\r\n    }}\r\n    style={seeSide ? '' : 'left:1em;'}>\r\n    <span style=\"font-size:150%\">≡</span>\r\n  </button>\r\n\r\n  <div class=\"main\" style={seeSide ? '' : 'padding-left:1rem;'}>\r\n\r\n    {#if article}\r\n      <Article\r\n        {article}\r\n        {query}\r\n        on:prev={e => nextArticle(-1)}\r\n        on:next={e => nextArticle(1)} />\r\n    {:else if query}\r\n      {rul.str(\"Searching\")} \"\r\n      <em>{query}</em>\r\n      \":\r\n      <br />\r\n      {#if found && found.length > 0}\r\n        <LinksPage links={found} />\r\n      {:else if query.length < 2}\r\n        <i>{rul.str(\"Query too short\")}!</i>\r\n      {:else if searchDelayHandle}\r\n        ...\r\n      {:else}\r\n        <i>{rul.str(\"Nothing found\")}.</i>\r\n      {/if}\r\n    {:else if !query}\r\n      <!--\r\n      {#each rul.sectionsOrder.concat(rul.typeSectionsOrder) as section}\r\n        <h1><a href={'#' + section.id}>{section.title}</a></h1>\r\n        <LinksPage links={section.articles.map(a => a.id)} />\r\n      {/each}-->\r\n      <Intro />\r\n    {/if}\r\n  </div>\r\n\r\n  <div class=\"tooltip fadein\" bind:this={tooltip}>Tooltip</div>\r\n{/await}\r\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import SpecialBonus from \"./SpecialBonus.svelte\";\r\n  import Link from \"./Link.svelte\";\r\n  import CanvasImage from \"./CanvasImage.svelte\";\r\n  import BaseServiceList from \"./BaseServiceList.svelte\";\r\n  import Value from \"./Value.svelte\";\r\n  import AlterList from \"./AlterList.svelte\";\r\n  import TableKey from \"./TableKey.svelte\";\r\n\r\n  export let item;\r\n  export let title = rul.str(\"Item\");\r\n  let attacks;\r\n\r\n  function soundsFrom(sounds) {\r\n    if (!sounds) return [];\r\n    if (!sounds.length) sounds = [sounds];\r\n    return sounds.map(s => rul.path + rul.sounds[s]).filter(s => s);\r\n  }\r\n\r\n  $: {\r\n    attacks = item.attacks().slice();\r\n\r\n    if (item.compatibleAmmo)\r\n      for (let ammoId of item.compatibleAmmo) {\r\n        let ammo = rul.items[ammoId];\r\n        let ammoAttack = ammo.attacks()[0];\r\n        attacks.push(ammoAttack);\r\n      }\r\n\r\n    console.info(attacks);\r\n  }\r\n\r\n  console.info(item);\r\n</script>\r\n\r\n<style>\r\n  .right-column {\r\n    vertical-align: top;\r\n  }\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n  .ammo-img {\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    padding: 0px 2px 0px 0px;\r\n    zoom: 1.5;\r\n    background: rgb(35, 39, 39);\r\n  }\r\n</style>\r\n\r\n<tr>\r\n  <td class=\"table-header\" colspan=\"2\">{title}</td>\r\n</tr>\r\n{#if (item.sprite && item.sprite != 'Resources/Blanks/Blank.png') || attacks.length > 0}\r\n  <tr>\r\n    <td colspan=\"2\" class=\"td-attacks-table\">\r\n      <div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; margin: 5px 5px; min-width: 98%;\">\r\n        <div class=\"image-bg\"><CanvasImage src={rul.sprite(item.sprite)} maxWidth={64*item.invWidth} maxHeight={96*item.invHeight} zoom=\"3\"/></div>\r\n        {#if attacks.length > 0}\r\n          <table class=\"attacks-table\">\r\n            <thead>\r\n              {#if item.battleType != 2}\r\n                <td>{rul.str('mode')}</td>\r\n                <td>{rul.str('accuracy')}</td>\r\n                <td>{rul.str('cost')}</td>\r\n                <td>{rul.str('damage')}</td>\r\n              {/if}\r\n              {#if item.battleType == 2}\r\n                <td>{rul.str('sprite')}</td>\r\n                <td colspan=\"2\">{rul.str('Specifications')}</td>\r\n                <td>{rul.str('damage')}</td>\r\n              {/if}\r\n            </thead>\r\n            {#each attacks as attack}\r\n              <tr>\r\n                {#if attack.mode == 'ammo'}\r\n                  <td class=\"ammo-img\">\r\n                    <CanvasImage\r\n                      src={rul.sprite(attack.item.sprite)}\r\n                      maxWidth={32 * attack.item.invWidth}\r\n                      maxHeight={32 * attack.item.invHeight}\r\n                      zoom=\"2\" />\r\n                    <!--<img class=\"sprite\" use:ammoSprite style=\"position:relative;\" alt=\"X\" src={rul.sprite(attack.item.sprite)}/>-->\r\n                  </td>\r\n                  <td colspan=\"2\">\r\n                    <Link href={attack.item.type} />\r\n                    <br />\r\n                    <small>\r\n                      {rul.str('Shots')}: {attack.item.clipSize}\r\n                      <br />\r\n                      {rul.str('Wgt')}: {attack.item.weight}\r\n                    </small>\r\n                  </td>\r\n                {:else}\r\n                  <td>\r\n                    {rul.str(attack.name)}{attack.shots == 1 ? '' : '×' + attack.shots}\r\n                  </td>\r\n                  <td>\r\n                    <nobr>\r\n                      <span>\r\n                        <em class=\"big-number\">{attack.accuracy}</em>\r\n                        {'%'}\r\n                      </span>\r\n\r\n                      <span>\r\n                        {#if attack.range}\r\n                          {@html rul\r\n                            .str('at N m')\r\n                            .replace('N', `<em>${attack.range}</em>`)}\r\n                        {/if}\r\n                      </span>\r\n\r\n                      <div>\r\n                        <SpecialBonus bonus={attack.accuracyMultiplier} />\r\n                      </div>\r\n                    </nobr>\r\n                  </td>\r\n                  <td>\r\n                    <nobr>\r\n                      <em>{attack.cost.time}</em>\r\n                      {attack.flatTime ? '' : '%'}\r\n                      <small>{rul.str('TU')}</small>\r\n                    </nobr>\r\n                    {#each Object.keys(attack.cost) as res}\r\n                      {#if res != 'time' && attack.cost[res] != 0}\r\n                        <br />\r\n                        <nobr>\r\n                          <Value val={attack.cost[res]} />\r\n                          <small>{rul.str(res)}</small>\r\n                        </nobr>\r\n                      {/if}\r\n                    {/each}\r\n                  </td>\r\n                {/if}\r\n                <td>\r\n                  {#if 'damage' in attack || 'damageType' in attack}\r\n                    <nobr>\r\n                      {attack.pellets > 1 && attack.damageBonus ? '(' : ''}\r\n                      <em>{attack.damage || 0}</em>\r\n                      <small>\r\n                        <SpecialBonus plus={true} bonus={attack.damageBonus} />\r\n                        {attack.pellets > 1 && attack.damageBonus ? ')' : ''}\r\n                      </small>\r\n                      {attack.pellets > 1 ? ' ×' + attack.pellets : ''}\r\n                    </nobr>\r\n                    <br />\r\n                    {#if attack.damageType}\r\n                      <Link href={rul.damageTypes[attack.damageType]} />\r\n                    {/if}\r\n                  {/if}\r\n                </td>\r\n              </tr>\r\n              {#if attack.mode == 'melee' && item.meleeAlter && item.battleType != 2}\r\n                <AlterList items={item.meleeAlter} />\r\n              {/if}\r\n              {#if attack.mode == 'ammo' && attack.alter}\r\n                <AlterList items={attack.alter} />\r\n              {/if}\r\n            {/each}\r\n            {#if item.damageAlter && item.battleType != 2}\r\n              <AlterList items={item.damageAlter} />\r\n            {/if}\r\n          </table>\r\n        {/if}\r\n      </div>\r\n    </td>\r\n  </tr>\r\n{/if}\r\n\r\n{#each Object.entries(item).sort((a, b) =>\r\n  a[0] > b[0] ? 1 : -1\r\n) as [key, prop]}\r\n  {#if !['sprite', 'type', '_attacks', 'damageAlter', 'meleeAlter'].includes(key)}\r\n    <tr>\r\n      <TableKey {key} />\r\n      <td class=\"right-column\">\r\n        {#if ['requiresBuyBaseFunc'].includes(key)}\r\n          <BaseServiceList items={prop} vertical={true} />\r\n        {:else if ['manufacture', 'componentOf'].includes(key)}\r\n          <table class=\"number-table\">\r\n            {#each Object.keys(prop) as field, i}\r\n              <tr>\r\n                <td>\r\n                  <em>{prop[field]}</em>\r\n                </td>\r\n                <td>\r\n                  <Link href={field} />\r\n                </td>\r\n              </tr>\r\n            {/each}\r\n          </table>\r\n        {:else if ['damageBonus', 'meleeBonus', 'accuracyMultiplier', 'meleeMultiplier', 'closeQuartersMultiplier'].includes(key)}\r\n          <SpecialBonus bonus={prop} />\r\n        {:else if ['damageType', 'meleeType'].includes(key)}\r\n          {prop}: {rul.damageTypeName(prop)}\r\n        {:else if key == 'battleType'}\r\n          {prop}: {rul.str(rul.battleTypes[prop])}\r\n        {:else if key == 'experienceTrainingMode'}\r\n          {prop}: {rul.str(rul.experienceTrainingModes[prop])}\r\n        {:else if key.includes('Sound')}\r\n          {#each soundsFrom(prop) as sound, i}\r\n            {@html i > 0 ? '<br/>' : ''}\r\n            <audio controls src={sound}>Audio tag not working</audio>\r\n          {/each}\r\n        {:else if ['floorSprite', 'handSprite'].includes(key)}\r\n          <a style=\"vertical-align:top\" href={rul.specialSprite(key, prop)}>\r\n            {prop}\r\n          </a>\r\n          <img class=\"sprite\" alt={prop} src={rul.specialSprite(key, prop)} />\r\n        {:else}\r\n          <Value val={prop} />\r\n        {/if}\r\n      </td>\r\n    </tr>\r\n  {/if}\r\n{/each}\r\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import BaseServiceList from \"./BaseServiceList.svelte\";\r\n  import SpecialBonus from \"./SpecialBonus.svelte\";\r\n  import TableKey from \"./TableKey.svelte\";\r\n\r\n  import { Link, LinksPage, Value, LinksList } from \"./Components\";\r\n\r\n  export let facility;\r\n  let seeStorageTiles = false;\r\n  let size = 1;\r\n\r\n  $: {\r\n    size = facility.size || 1;\r\n    console.log(size);\r\n    console.info(facility);\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .dropdown-content {\r\n    background: black;\r\n    padding: 5px;\r\n  }\r\n</style>\r\n\r\n<table class=\"main-table\">\r\n  <tr>\r\n    <td colspan=\"2\" class=\"table-header\">{rul.str('Facility')}</td>\r\n  </tr>\r\n  {#each Object.entries(facility).sort((a, b) =>\r\n    a[0] > b[0] && a[0] != 'storageTiles' ? 1 : -1\r\n  ) as [key, prop]}\r\n    {#if !['type', 'battlescapeTerrainData', 'craftInventoryTile', 'deployment'].includes(key)}\r\n      <tr>\r\n        <TableKey {key} />\r\n        <td>\r\n          {#if ['buildCostItems'].includes(key)}\r\n            {#each Object.keys(prop).sort() as field, i}\r\n              {#if i != 0}\r\n                <br />\r\n              {/if}\r\n              <Link href={field} />\r\n              : {prop[field].build} / {prop[field].refund}\r\n            {/each}\r\n          {:else if ['storageTiles'].includes(key)}\r\n            <div>\r\n              <div>\r\n                <button\r\n                  class=\"button dropdown-content\"\r\n                  on:click={e => (seeStorageTiles = !seeStorageTiles)}>\r\n                  {seeStorageTiles ? rul.str(\"Hide\") : rul.str(\"Show\")}\r\n                </button>\r\n              </div>\r\n              <div>\r\n                {#if seeStorageTiles}\r\n                  <div style=\"columns:3\">\r\n                    <LinksList items={prop} vertical={true} />\r\n                  </div>\r\n                {/if}\r\n              </div>\r\n            </div>\r\n          {:else if ['provideBaseFunc', 'requiresBaseFunc', 'forbiddenBaseFunc'].includes(key)}\r\n            <BaseServiceList items={prop} vertical={true} />\r\n          {:else if ['spriteFacility', 'spriteShape'].includes(key)}\r\n            <div class=\"tight\" style=\"columns:{size};width:{64 * size}px;\">\r\n              {#each { length: size } as _, y}\r\n                {#each { length: size } as _, x}\r\n                  <img\r\n                    class=\"facility sprite\"\r\n                    onerror=\"this.onerror=null; this.src='xpedia/0.jpg'\"\r\n                    alt=\"X\"\r\n                    src={rul.specialSprite('baseSprite', prop * 1 + x * size + y)} />\r\n                {/each}\r\n              {/each}\r\n            </div>\r\n          {:else}\r\n            <Value val={prop} />\r\n          {/if}\r\n        </td>\r\n      </tr>\r\n    {/if}\r\n  {/each}\r\n</table>\r\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import { Link, LinksPage, Value, LinksList } from \"./Components\";\r\n\r\n  export let query = null\r\n\r\n  console.log(query);\r\n</script>\r\n\r\n<style>\r\n.highlight td{\r\n  background: #685C74;\r\n}\r\na{\r\n  color:cyan;\r\n}\r\n</style>\r\n\r\n<table class=\"main-table\">\r\n\r\n  {#each Object.entries(rul.baseServices) as service}\r\n    <tr class={service[0] == query?\"highlight\":\"\"}>\r\n      <td><a color=cyan href={'#' + service[0]}>{@html rul.str(service[0])}</a></td>\r\n      <td>\r\n        <LinksList items={service[1].providedBy} />\r\n      </td>\r\n    </tr>\r\n  {/each}\r\n\r\n</table>\r\n"
  ],
  "names": [],
  "mappings": "AA0KE,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,KAAK,CAClB,UAAU,CAAE,MAAM,AACpB,CAAC;AC9ID,aAAa,cAAC,CAAC,AACb,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,SAAS,cAAC,CAAC,AACT,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CACxB,IAAI,CAAE,GAAG,CACT,UAAU,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AAC7B,CAAC;AC7BD,iBAAiB,cAAC,CAAC,AACjB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,GAAG,AACd,CAAC;ACbH,wBAAU,CAAC,gBAAE,CAAC,AACZ,UAAU,CAAE,OAAO,AACrB,CAAC,AACD,6BAAC,CAAC,AACA,MAAM,IAAI,AACZ,CAAC"
}